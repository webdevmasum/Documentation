
***********
Step-1: Work Flow >>>>
***********

    1. Install Reverb 
    -->> php artisan install:broadcasting 

    2. register channel to bootstrap/app.php
    3. Make DataTable
    4. Make Controller
    5. Make a Chennel into channel.php

    //!! maybe automatically created 
    php artisan make:channel OrderChannel (channel name)
    php artisan channel:list

    6. Make Event
    -->> php artisan make:event EventName

    7. Make Route
    8. Make View 


***********
Step-2: Project Setup
***********

    1. composer create-project Laravel/Laravel example-app
    2. .env             (database)
    3. composer require Laravel/breeze --dev
    4. php artisan breeze:install
    5. php artisan migrate
    6. npm install
    7. npm run dev

***********
Step-3: Reverd - Broadcasting 
***********

    1. php artisan install:broadcasting
       (yes) (yes)
       [show .env , config/reverb.php, brodcasting.php, resourse/js/echo.js] 

    2. bootstrap/app.php
       ->withRouting(
       channels: __DIR__.'/../routes/channels.php',
       )

    3.  php artisan make:model Message -m
        php artisan migrate

        Schema::create('chat_messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('receiver_id')->nullable()->constrained('users')->onDelete('cascade');
            $table->text('text')->nullable();
            $table->enum('status', ['sent', 'read', 'unread'])->default('unread');
            $table->timestamps();
            $table->softDeletes();
        });

        
***********
Step-4: Model - Relationship
***********

    namespace App\Models;

    use Illuminate\Database\Eloquent\Factories\HasFactory;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\SoftDeletes;

    class ChatMessage extends Model
    {
        use HasFactory, SoftDeletes;

        protected $fillable = [
            'sender_id',
            'receiver_id',
            'text',
            'conversation_id'
        ];

        protected function casts(): array {
            return [
                'sender_id'   => 'integer',
                'receiver_id' => 'integer',
                'text'        => 'string',
            ];
        }

        public function sender(): BelongsTo {
            return $this->belongsTo(User::class, 'sender_id');
        }

        public function receiver(): BelongsTo {
            return $this->belongsTo(User::class, 'receiver_id');
        }
    }


    ------>>>>> User Model Relationship <<<<<<-------

    public function senders()
    {
        return $this->hasMany(ChatMessage::class, 'sender_id');
    }

    public function receivers()
    {
        return $this->hasMany(ChatMessage::class, 'receiver_id');
    }


***********
Step-5: Make a Chennel
***********

    //!! channel.php automatically created 
    //!! If need create channel 
    php artisan make:channel OrderChannel (channel name)
    php artisan channel:list


    -->> routes/channels.php

    //! live chat channel added by rasel bhai last time
    Broadcast::channel('chat.{receiver_id}', function ($user, $receiver_id) {
        return (int) $user->id === (int) $receiver_id;
    });


***********
Step-6: Make a Event
***********

    -->> app/Event/MessageSent


<?php

namespace App\Events;

use App\Models\ChatMessage;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class MessageSent implements ShouldBroadcastNow {

    use Dispatchable, InteractsWithSockets, SerializesModels;

    public ChatMessage $message;

    /**
     * Create a new event instance.
     */
    public function __construct(ChatMessage $message)
    {
        $this->message = $message;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return array<int, \Illuminate\Broadcasting\Channel>
     */
    public function broadcastOn(): array
    {
        return [
            new PrivateChannel("chat.{$this->message->receiver_id}"),
        ];
    }

    public function broadcastWith()
    {
        return ['message' => $this->message];
    }
}


***********
Step-7: Make a Event
***********


















