Laravel Reverb:

Step-1 :
---------------
php artisan install:broadcasting

.env :
------
BROADCAST_DRIVER=reverb
REVERB_APP_ID=your-app-id
REVERB_APP_KEY=your-app-key
REVERB_APP_SECRET=your-app-secret

Terminal: will be running this command:
---------------------------------------
php artisan reverb:start



Step-2 :
---------------
Command:
php artisan make:model ChatMessage -m

------------
schema :
--------------

Schema::create('chat_messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
            $table->text('message');
            $table->timestamps();
        });
----------------------
Model : ChatMessage.php
----------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class ChatMessage extends Model
{
    use HasFactory;

    protected $fillable = ['sender_id', 'receiver_id', 'message'];

    // Sender Relationship (who sent the message)
    public function sender()
    {
        return $this->belongsTo(User::class, 'sender_id');
    }
    // Receiver Relationship (who received the message)
    public function receiver()
    {
        return $this->belongsTo(User::class, 'receiver_id');
    }
}

----------------
Model: User.php
----------------
 // User's sent messages
    public function sentMessages()
    {
        return $this->hasMany(ChatMessage::class, 'sender_id');
    }

    // User's received messages
    public function receivedMessages()
    {
        return $this->hasMany(ChatMessage::class, 'receiver_id');
    }




Step-3 :
---------------
Create Event :
php artisan make:event MessageSent


<?php

namespace App\Events;

use App\Models\ChatMessage;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class MessageSent implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $chatMessage;

    public function __construct(ChatMessage $chatMessage)
    {
        $this->chatMessage = $chatMessage;
    }

    public function broadcastOn()
    {
        return new Channel('chat.' . $this->chatMessage->receiver_id);
    }

    public function broadcastWith()
    {
        return [
            'sender_id' => $this->chatMessage->sender_id,
            'receiver_id' => $this->chatMessage->receiver_id,
            'message' => $this->chatMessage->message,
            'created_at' => $this->chatMessage->created_at->toDateTimeString(),
        ];
    }
}




Step-4 :
---------------
php artisan make:controller ChatController



<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Events\MessageSent;
use App\Models\ChatMessage;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Traits\ApiResponse;

class ChatController extends Controller
{
    use ApiResponse;
    
    public function sendMessage(Request $request)
    {
        $request->validate([
            'message' => 'required|string',
            'receiver_id' => 'required|exists:users,id',
        ]);

        $chatMessage = ChatMessage::create([
            'sender_id' => Auth::id(),
            'receiver_id' => $request->receiver_id,
            'message' => $request->message,
        ]);

        broadcast(new MessageSent($chatMessage))->toOthers();

        return $this->ok('Message Sent!', $chatMessage);
    }


    public function getMessages()
    {
        $userId = auth()->id();

        $messages = ChatMessage::where('receiver_id', $userId)
            ->orWhere('sender_id', $userId)
            ->orderBy('created_at', 'asc')
            // Fetch the information of the sender and receiver
            ->with(['sender', 'receiver'])
            ->get();

        return $this->ok('Messages retrieved successfully!', $messages);
    }
}




Step-5 :
---------------
//For live chat
    Route::post('/chat/sent/message', [ChatController::class, 'sendMessage']);
    Route::get('/chat/get/messages', [ChatController::class, 'getMessages']);




Step-6:
-------------------------
PostMan Hit:

 Route::post('/chat/sent/message', [ChatController::class, 'sendMessage']);

raw :

{
    "receiver_id": 5,
    "message": "Hello, I am Fine and now I am in Canada?"
}