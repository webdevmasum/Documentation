********************
Database --->>>
********************

=================>>>>>>>>>>>>>>>> Product <<<<<<<<<<<===================

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('category_id');
            $table->foreign('category_id')->references('id')->on('categories')
                ->onDelete('cascade')
                ->onUpdate('cascade');
            $table->unsignedBigInteger('brand_id');
            $table->foreign('brand_id')->references('id')->on('brands')
                ->onDelete('cascade')
                ->onUpdate('cascade');
            $table->unsignedBigInteger('designer_id');
            $table->foreign('designer_id')->references('id')->on('designers')
                ->onDelete('cascade')
                ->onUpdate('cascade');
            $table->string('name');
            $table->integer('old_price')->nullable();
            $table->integer('selling_price');

            //!! 2nd time add
            $table->string('product_code', 50);
            $table->text('description');
            $table->text('sub_description');

            $table->string('image')->nullable();
            $table->boolean('trending_product')->default(false);

            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->useCurrent()->useCurrentOnUpdate();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};


=================>>>>>>>>>>>>>>>> Product End <<<<<<<<<<<===================



********************
Database --->>> for relation
********************


    Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('category_name');
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->useCurrent()->useCurrentOnUpdate();
            $table->softDeletes();
        });


    Schema::create('variants', function (Blueprint $table) {
            $table->id();
            $table->foreignId('product_id')->references('id')->on('products')->onDelete('cascade');
            $table->string('color')->nullable();
            $table->string('color_code')->nullable();
            $table->integer('quantity')->default(0);
            $table->string('variant_image')->nullable();
            $table->timestamps();
            $table->softDeletes();
        });


    Schema::create('designers', function (Blueprint $table) {
            $table->id();
            $table->string('designer_name');
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->useCurrent()->useCurrentOnUpdate();
            $table->softDeletes();
        });

    Schema::create('brands', function (Blueprint $table) {
            $table->id();
            $table->string('brand_name');
            $table->string('brand_image')->nullable();
            $table->boolean('is_featured')->default(false);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->useCurrent()->useCurrentOnUpdate();
            $table->softDeletes();
        });        


    Schema::create('designers', function (Blueprint $table) {
            $table->id();
            $table->string('designer_name');
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->useCurrent()->useCurrentOnUpdate();
            $table->softDeletes();
        });


        ++++++++++++++++++++++++>>>>>>>>>>> Database End<<<<<<<<<<<<<<<<<<<<++++++++++++++++++

********************
Models --->>> for relation
********************



<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class Product extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
        'colour_code',
    ];


    //! using for image url (API - React)
    // public function getImageAttribute($value)
    // {
    //     return $value ? url($value) : null;
    // }


    public function getImageAttribute($value)
    {
        return $value ? url($value) : null;
    }


    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function brand(): BelongsTo
    {
        return $this->belongsTo(Brand::class);
    }

    public function designer(): BelongsTo
    {
        return $this->belongsTo(Designer::class);
    }



    public function productDetails(): HasMany
    {
        return $this->hasMany(ProductDetail::class);
    }

    // Define the relationship with ProductDetail
    public function productDetail()
    {
        return $this->hasOne(ProductDetail::class);
    }


    // A product has many variants  by Masum
    public function variants()
    {
        return $this->hasMany(Variant::class);
    }


    //! A product has many orders by Masum
    public function orders()
    {
        return $this->hasMany(Order::class);
    }

    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }


    //! A product has many cart items by Masum
    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }

    // Define the relationship with the Review model
    public function reviews()
    {
        return $this->hasMany(Review::class, 'product_id', 'id');
    }

    public function gallery()
    {
        return $this->hasMany(Gallery::class);
    }

    public function galleries()
    {
        return $this->hasMany(Gallery::class, 'product_id'); // Explicitly reference 'product_id'
    }


}



-------------------------------------------------------------------------


class Category extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    public function products(): HasMany {
        return $this->hasMany(Product::class);
    }
}






class Variant extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'created_at',
        'updated_at',
        'deleted_at',        
    ];

    // A variant belongs to a product
    public function product()
    {
        return $this->belongsTo(Product::class);
    }


    //! A variant has many cart items
    public function cartItems()
    {
        return $this->hasMany(CartItem::class);
    }
}




class Designer extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    public function products(): HasMany {
        return $this->hasMany(Product::class);
    }
}





class Brand extends Model
{
    use HasFactory,SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    public function products(): HasMany {
        return $this->hasMany(Product::class);
    }
}




