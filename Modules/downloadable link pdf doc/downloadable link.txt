*************************
Database
*************************

    public function up(): void
    {
        Schema::create('useful_templates', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('slug')->nullable()->unique();
            $table->string('usefultemplate')->nullable();
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamps();
            $table->softDeletes();
        });
    }


*************************
Route for web
*************************

     //! Route for UsefulTemplateController
     Route::get('/usefultemplate', [UsefulTemplateController::class, 'index'])->name('usefultemplate.index');
     Route::get('/usefultemplate/create', [UsefulTemplateController::class, 'create'])->name('usefultemplate.create');
     Route::post('/usefultemplate/store', [UsefulTemplateController::class, 'store'])->name('usefultemplate.store');
     Route::get('/usefultemplate/show/{id}', [UsefulTemplateController::class, 'show'])->name('usefultemplate.show');
     Route::get('/usefultemplate/edit/{id}', [UsefulTemplateController::class, 'edit'])->name('usefultemplate.edit');
     Route::post('/usefultemplate/update/{id}', [UsefulTemplateController::class, 'update'])->name('usefultemplate.update');
     Route::get('/usefultemplate/status/{id}', [UsefulTemplateController::class, 'status'])->name('usefultemplate.status');
     Route::delete('/usefultemplate/destroy/{id}', [UsefulTemplateController::class, 'destroy'])->name('usefultemplate.destroy');


*************************
Route for API
*************************

//!! Route for UsefulTemplateController
Route::get('/useful-templates', [UsefulTemplateController::class, 'index']);



*************************
Controller for web
*************************


<?php

namespace App\Http\Controllers\Web\Backend\UsefulTemplate;

use App\Helpers\Helper;
use App\Http\Controllers\Controller;
use App\Models\UsefulTemplate;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;

use Illuminate\Support\Str;
use Illuminate\Support\Facades\File;

class UsefulTemplateController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $data = UsefulTemplate::latest();
        if ($request->ajax()) {
            return DataTables::of($data)
                ->addIndexColumn()

                ->addColumn('status', function ($data) {
                    $status = '';
                    $status .= '<div class="switch-sm icon-state">';
                    $status .= '<label class="switch">';
                    $status .= '<input onclick="showStatusChangeAlert(' . $data->id . ')" type="checkbox" class="form-check-input" id="customSwitch' . $data->id . '" getAreaid="' . $data->id . '" name="status"';

                    // Check if the status is active
                    if ($data->status == "active") {
                        $status .= ' checked';
                    }

                    $status .= '>';
                    $status .= '<span class="switch-state"></span>'; // This is the visual switch
                    $status .= '</label>';
                    $status .= '</div>';
                    $status .= '</div>';

                    return $status;
                })

                ->addColumn('action', function ($data) {

                    return '<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                  <a href="' . route('usefultemplate.edit',  $data->id) . '" type="button" class="action edit text-success" title="Edit">
                                  <i class="icon-pencil-alt"></i>
                                  </a>&nbsp;
                                  <a href="#" onclick="showDeleteConfirm(' . $data->id . ')" type="button" class="action delete text-danger" title="Delete">
                                  <i class="icon-trash"></i>
                                </a>
                                </div>';
                })

                ->rawColumns(['status', 'action'])

                ->make(true);
        }


        return view('backend.layouts.usefultemplate.index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('backend.layouts.usefultemplate.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // Validate incoming data
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'usefultemplate' => 'nullable|mimes:pdf,doc,docx|max:2048',
        ]);

        try {
            // Create new useful template instance
            $usefulTemplate = new UsefulTemplate();
            $usefulTemplate->title = $validated['title'];
            $usefulTemplate->slug = Str::slug($validated['title']);

            // Check if a new file is uploaded
            if ($request->hasFile('usefultemplate')) {
                if ($usefulTemplate->usefultemplate && File::exists(public_path($usefulTemplate->usefultemplate))) {
                    File::delete(public_path($usefulTemplate->usefultemplate));
                }

                // Upload and store new file using Helper
                $usefulTemplate->usefultemplate = Helper::fileUpload($request->file('usefultemplate'), 'useful-templates', $validated['title']);
            }

            $usefulTemplate->save();

            // Redirect or return a response
            return redirect()->route('usefultemplate.index')->with('notify-success', 'Template created successfully!');
        } catch (\Exception $e) {
            // Handle any exception
            return redirect()->route('usefultemplate.index')->with('notify-error', 'Failed to create template. Please try again.');
        }
    }


    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $data = UsefulTemplate::findOrFail($id);
        return view('backend.layouts.usefultemplate.edit', compact('data'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        // Validate incoming data
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'usefultemplate' => 'nullable|mimes:pdf,doc,docx|max:2048',
        ]);

        try {
            // Find the existing useful template
            $usefulTemplate = UsefulTemplate::findOrFail($id);
            $usefulTemplate->title = $validated['title'];
            $usefulTemplate->slug = Str::slug($validated['title']);

            // Check if a new file is uploaded
            if ($request->hasFile('usefultemplate')) {
                // Delete old file if exists
                if ($usefulTemplate->usefultemplate && File::exists(public_path($usefulTemplate->usefultemplate))) {
                    File::delete(public_path($usefulTemplate->usefultemplate));
                }

                // Upload and store new file using Helper
                $usefulTemplate->usefultemplate = Helper::fileUpload($request->file('usefultemplate'), 'useful-templates', $validated['title']);
            }

            $usefulTemplate->save();

            // Redirect or return a response
            return redirect()->route('usefultemplate.index')->with('notify-success', 'Template updated successfully!');
        } catch (\Exception $e) {
            // Handle any exception
            return redirect()->route('usefultemplate.index')->with('notify-error', 'Failed to update template. Please try again.');
        }
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $data = UsefulTemplate::findOrFail($id);

        $data->delete();

        return response()->json([
            'success' => true,
            'message' => 'Deleted successfully.',
        ]);
    }


    /**
     * Update the status of a brandlogo.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function status($id)
    {
        $data = UsefulTemplate::findOrFail($id);

        if ($data->status == 'active') {
            $data->status = 'inactive';
            $data->save();
            return response()->json([
                'success' => false,
                'message' => 'Unpublished Successfully.',
                'data' => $data,
            ]);
        } else {
            $data->status = 'active';
            $data->save();
            return response()->json([
                'success' => true,
                'message' => 'Published Successfully.',
                'data' => $data,
            ]);
        }
    }
}


*************************
Controller for API
*************************



<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\UsefulTemplate;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades\File;

class UsefulTemplateController extends Controller
{
    //  All files list return
    public function index()
    {
        $templates = UsefulTemplate::select('id', 'title', 'usefultemplate')->get();

        if ($templates->isEmpty()) {
            return response()->json([
                'status'    => false,
                'message'   => 'No templates found',
                'data'      => []
            ], Response::HTTP_NOT_FOUND);
        }

        return response()->json([
            'status'        => true,
            'message'       => 'Templates retrieved successfully',
            'data'          => $templates
        ], Response::HTTP_OK);
    }
}


*************************
Blade for web
*************************

