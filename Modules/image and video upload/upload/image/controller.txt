<?php

namespace App\Http\Controllers\Web\Backend\CompanyService;

use App\Helpers\Helper;
use App\Http\Controllers\Controller;
use App\Models\CompanyService;
use App\Models\ServiceCategory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Yajra\DataTables\DataTables;

class CompanyServiceController extends Controller
{
    public function index(Request $request)
    {
        $data = CompanyService::latest();
        if ($request->ajax()) {
            return DataTables::of($data)
                ->addIndexColumn()

                ->addColumn('category_name', function ($query) {
                    return optional($query->serviceCategory)->category_name;
                })

                ->addColumn('status', function ($data) {
                    $status = '';
                    $status .= '<div class="switch-sm icon-state">';
                    $status .= '<label class="switch">';
                    $status .= '<input onclick="showStatusChangeAlert(' . $data->id . ')" type="checkbox" class="form-check-input" id="customSwitch' . $data->id . '" getAreaid="' . $data->id . '" name="status"';

                    // Check if the status is active
                    if ($data->status == "active") {
                        $status .= ' checked';
                    }

                    $status .= '>';
                    $status .= '<span class="switch-state"></span>'; // This is the visual switch
                    $status .= '</label>';
                    $status .= '</div>';
                    $status .= '</div>';

                    return $status;
                })

                ->addColumn('action', function ($data) {

                    return '<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                  <a href="' . route('companyservice.edit',  $data->id) . '" type="button" class="action edit text-success" title="Edit">
                                  <i class="icon-pencil-alt"></i>
                                  </a>&nbsp;
                                  <a href="#" onclick="showDeleteConfirm(' . $data->id . ')" type="button" class="action delete text-danger" title="Delete">
                                  <i class="icon-trash"></i>
                                </a>
                                </div>';
                })

                ->addColumn('image', function ($data) {
                    $url = asset($data->image);
                    return '<img src="' . $url . '" alt="image" width="80px" height="50px" style="margin-left:20px;">';
                })

                ->filterColumn('category_name', function ($query, $keyword) {
                    $query->whereHas('serviceCategory', function ($q) use ($keyword) {
                        $q->where('category_name', 'like', "%{$keyword}%");
                    });
                })

                ->rawColumns(['status', 'action', 'image', 'category_name'])

                ->make(true);
        }

        return view('backend.layouts.company-service.index');
    }



    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $servicecategories = ServiceCategory::all();
        return view('backend.layouts.company-service.create', compact('servicecategories'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'service_category_id' => 'required|exists:service_categories,id',
            'description' => 'nullable|string',
            'image'       => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        try {
            $imagePath = null;
            if ($request->hasFile('image')) {
                $imagePath = Helper::fileUpload($request->file('image'), 'company-service', 'service-image');
            }

            $companyservice = CompanyService::create([
                'service_category_id' => $request->service_category_id,
                'description' => $request->description,
                'image'       => $imagePath,
            ]);

            return redirect()->route('companyservice.index')->with('notify-success', 'Company Service data created successfully.');
        } catch (\Exception $e) {
            return redirect()->back()->with('notify-error', 'Failed to create company service data: ' . $e->getMessage());
        }
    }


    /**
     * Display the specified resource for editing.
     */
    public function edit($id)
    {
        $companyservice = CompanyService::findOrFail($id);
        $serviceCategories = ServiceCategory::all();
        return view('backend.layouts.company-service.edit', compact('companyservice', 'serviceCategories'));
    }


    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'service_category_id' => 'required|exists:service_categories,id',
            'description' => 'nullable|string',
            'image'       => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        try {
            $companyservice = CompanyService::findOrFail($id);

            $imagePath = $companyservice->image;

            // Check if a new image was uploaded
            if ($request->hasFile('image')) {
                if ($companyservice->image && file_exists(public_path($companyservice->image))) {
                    unlink(public_path($companyservice->image));
                }

                // Upload the new image and get its path
                $imagePath = Helper::fileUpload($request->file('image'), 'company-service', 'service-image');
            }

            // Update the CompanyService entry with new data
            $companyservice->update([
                'service_category_id' => $request->service_category_id,
                'description' => $request->description,
                'image'       => $imagePath,
            ]);

            return redirect()->route('companyservice.index')->with('notify-success', 'Company Service data updated successfully.');
        } catch (\Exception $e) {
            return redirect()->back()->with('notify-error', 'Failed to update company service data: ' . $e->getMessage());
        }
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $data = CompanyService::findOrFail($id);

        $data->delete();

        return response()->json([
            'success' => true,
            'message' => 'Deleted successfully.',
        ]);
    }

    /**
     * Update the status of a CompanyService.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function status($id)
    {
        $data = CompanyService::findOrFail($id);

        if ($data->status == 'active') {
            $data->status = 'inactive';
            $data->save();
            return response()->json([
                'success'   => false,
                'message'   => 'Unpublished Successfully.',
                'data'      => $data,
            ]);
        } else {
            $data->status = 'active';
            $data->save();
            return response()->json([
                'success'   => true,
                'message'   => 'Published Successfully.',
                'data'      => $data,
            ]);
        }
    }
}
