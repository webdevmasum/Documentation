******************
model--->>>
******************


<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class BrandLogo extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = [];

    protected $hidden = [
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
    ];


------------>>>>>>>> Finally It's working for image url create in API <<<<<<<<<<----------------

public function getThumbnailAttribute($value): string|null
    {
        if (filter_var($value, FILTER_VALIDATE_URL)) {
            return $value;
        }
        // Check if the request is an API request
        if (request()->is('api/*') && !empty($value)) {
            // Return the full URL for API requests
            return url($value);
        }

        // Return only the path for web requests
        return $value;
    }

------------>>>>>>>> End here........................................ <<<<<<<<<<----------------

    //!! this function create url/link when API development
    //!! --->> but to update image , old image didn't remove in that folder
    //!! --->> so last approach is good practice
    // public function getImageAttribute($value)
    // {
    //     return $value ? url($value) : null;
    // }


    ------------>>>>>>>> BUT ai code o jamela ace image_url deye link hobe <<<<<<<<<<----------------

    //!! API development iamge url is working
    //!! -->> but that function is good practice
    /* protected $appends = ['image_url'];

     public function getImageUrlAttribute()
    {
        // Full URL with asset() function using public path
        return url($this->image);
    } */


    //!! API development iamge url is working perfectly
    protected $appends = ['image_url'];

    public function getImageUrlAttribute()
    {
        if (!$this->image) {
            return asset('images/default-placeholder.png');
        }

        $imagePath = public_path($this->image);

        if (file_exists($imagePath)) {
            return url($this->image);
        }

        return asset('images/default-placeholder.png');
    }
}




******************
Web Controller--->>>
******************


<?php

namespace App\Http\Controllers\Web\Backend\BrandLogo;

use App\Helpers\Helper;
use App\Http\Controllers\Controller;
use App\Models\BrandLogo;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Yajra\DataTables\DataTables;

class BrandLogoController extends Controller
{

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $data = BrandLogo::latest();
        if ($request->ajax()) {
            return DataTables::of($data)
                ->addIndexColumn()

                ->addColumn('status', function ($data) {
                    $status = '';
                    $status .= '<div class="switch-sm icon-state">';
                    $status .= '<label class="switch">';
                    $status .= '<input onclick="showStatusChangeAlert(' . $data->id . ')" type="checkbox" class="form-check-input" id="customSwitch' . $data->id . '" getAreaid="' . $data->id . '" name="status"';

                    // Check if the status is active
                    if ($data->status == "active") {
                        $status .= ' checked';
                    }

                    $status .= '>';
                    $status .= '<span class="switch-state"></span>'; // This is the visual switch
                    $status .= '</label>';
                    $status .= '</div>';
                    $status .= '</div>';

                    return $status;
                })

                ->addColumn('action', function ($data) {

                    return '<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                  <a href="' . route('brandlogo.edit',  $data->id) . '" type="button" class="action edit text-success" title="Edit">
                                  <i class="icon-pencil-alt"></i>
                                  </a>&nbsp;
                                  <a href="#" onclick="showDeleteConfirm(' . $data->id . ')" type="button" class="action delete text-danger" title="Delete">
                                  <i class="icon-trash"></i>
                                </a>
                                </div>';
                })

                ->addColumn('image', function ($data) {
                    $url = asset($data->image);
                    return '<img src="' . $url . '" alt="image" width="80px" height="50px" style="margin-left:20px;">';
                })

                ->rawColumns(['status', 'action', 'image'])

                ->make(true);
        }

        return view('backend.layouts.brandlogo.index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('backend.layouts.brandlogo.create');
    }

    /**
     * Store a newly created resource in storage.
     */

    public function store(Request $request)
    {
        try {
            // Validate incoming data
            $validated = $request->validate([
                'title' => 'required|string|max:255',
                'sub_title' => 'nullable|string|max:255',
                'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            ]);

            // Handle the image upload using helper function
            $imagePath = null;
            if ($request->hasFile('image')) {
                $imagePath = Helper::fileUpload($request->file('image'), 'brandlogos', $request->title);
            }

            // Create the brandlogo post
            $data = BrandLogo::create([
                'title' => $request->title,
                'sub_title' => $request->sub_title,
                'image' => $imagePath,
            ]);

            return redirect()->route('brandlogo.index')->with('notify-success', 'Brandlogo created successfully');
        } catch (\Exception $e) {
            return redirect()->back()->with('notify-error', 'Something went wrong! ' . $e->getMessage());
        }
    }


    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $data = BrandLogo::findOrFail($id);
        return view('backend.layouts.brandlogo.edit', compact('data'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        try {
            // Validate incoming data
            $validated = $request->validate([
                'title' => 'required|string|max:255',
                'sub_title' => 'nullable|string|max:255',
                'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            ]);

            // Find the existing brand logo
            $data = BrandLogo::findOrFail($id);


            $images = $data->image;


            if ($request->hasFile('image')) {
                if ($data->image && File::exists(public_path($data->image))) {
                    File::delete(public_path($data->image));
                }

                $images = Helper::fileUpload($request->file('image'), 'brandlogos', $request->title);
            }

            $data->update([
                'title' => $request->title,
                'sub_title' => $request->sub_title,
                'image' => $images
            ]);

            return redirect()->route('brandlogo.index')->with('notify-success', 'Brandlogo updated successfully');
        } catch (\Exception $e) {
            return redirect()->back()->with('notify-error', 'Something went wrong! ' . $e->getMessage());
        }
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $data = BrandLogo::findOrFail($id);

        $data->delete();

        return response()->json([
            'success' => true,
            'message' => 'Deleted successfully.',
        ]);
    }

    /**
     * Update the status of a brandlogo.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function status($id)
    {
        $data = BrandLogo::findOrFail($id);

        if ($data->status == 'active') {
            $data->status = 'inactive';
            $data->save();
            return response()->json([
                'success' => false,
                'message' => 'Unpublished Successfully.',
                'data' => $data,
            ]);
        } else {
            $data->status = 'active';
            $data->save();
            return response()->json([
                'success' => true,
                'message' => 'Published Successfully.',
                'data' => $data,
            ]);
        }
    }
}


******************
API Controller--->>>
******************


<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\BrandLogo;

class BrandLogoController extends Controller
{
    // Get all brand logos
    public function getAll()
    {
        try {
            // Fetch all brand logos (including soft-deleted ones if needed)
            $brandLogos = BrandLogo::all();

            // If no data found, return a null response
            if ($brandLogos->isEmpty()) {
                return response()->json([
                    'success' => false,
                    'message' => 'No brand logos found.',
                    'data' => []
                ], 404);
            }

            return response()->json([
                'success' => true,
                'message' => 'Brand logos fetched successfully.',
                'data' => $brandLogos
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to fetch data.',
                'data' => [],
                'error' => $e->getMessage()
            ], 500);
        }
    }

    // Get a single brand logo by ID
    public function getSingle($id)
    {
        try {
            // Find the brand logo by ID
            $brandLogo = BrandLogo::find($id);

            // If not found, return null
            if (!$brandLogo) {
                return response()->json([
                    'success' => false,
                    'message' => 'Brand logo not found.',
                    'data' => []
                ], 404);
            }

            return response()->json([
                'success' => true,
                'message' => 'Brand logo fetched successfully.',
                'data' => $brandLogo
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to fetch data.',
                'data' => [],
                'error' => $e->getMessage()
            ], 500);
        }
    }
}




