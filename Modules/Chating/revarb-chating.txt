********
step-1: DB
********

    public function up(): void
        {
            Schema::create('rooms', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_one_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('user_two_id')->constrained('users')->onDelete('cascade');
                $table->timestamps();
                $table->unique(['user_one_id', 'user_two_id']);
            });
        }



    public function up(): void {
            Schema::create('chats', function (Blueprint $table) {
                $table->id();
                $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('room_id')->nullable()->constrained('rooms')->nullOnDelete();
                $table->text('text')->nullable();
                $table->string('file')->nullable();
                $table->enum('status', ['sent', 'read', 'unread'])->default('unread');
                $table->timestamps();
                $table->softDeletes();
            });
        }



    public function up(): void
        {
            Schema::create('users', function (Blueprint $table) {
                $table->id();
                $table->string('name');
                $table->string('last_name')->nullable();
                $table->string('email')->unique();
                $table->timestamp('email_verified_at')->nullable();
                $table->boolean('is_verified')->default(false);


                $table->timestamp('last_activity_at')->nullable(); //for chat
            });
        }



********
step-2: Model
********

==>> User.php <<==

    protected $appends = [
            'is_online',
        ];


    //chat model relation
    public function senders() {
        return $this->hasMany(Chat::class, 'sender_id');
    }

    public function receivers() {
        return $this->hasMany(Chat::class, 'receiver_id');
    }

    public function roomsAsUserOne()
    {
        return $this->hasMany(Room::class, 'user_one_id');
    }

    public function roomsAsUserTwo()
    {
        return $this->hasMany(Room::class, 'user_two_id');
    }

    public function allRooms()
    {
        return Room::where('user_one_id', $this->id)->orWhere('user_two_id', $this->id);
    }

    public function getIsOnlineAttribute()
    {
        return $this->last_activity_at > now()->subMinutes(5);
    }



==>> Chat.php <<==



==>> User.php <<==











********
step-3:
********
********
step-4:
********
********
step-5:
********
********
step-6:
********