********
step-1: DB
********

    public function up(): void
        {
            Schema::create('rooms', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_one_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('user_two_id')->constrained('users')->onDelete('cascade');
                $table->timestamps();
                $table->unique(['user_one_id', 'user_two_id']);
            });
        }



    public function up(): void {
            Schema::create('chats', function (Blueprint $table) {
                $table->id();
                $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('room_id')->nullable()->constrained('rooms')->nullOnDelete();
                $table->text('text')->nullable();
                $table->string('file')->nullable();
                $table->enum('status', ['sent', 'read', 'unread'])->default('unread');
                $table->timestamps();
                $table->softDeletes();
            });
        }



    public function up(): void
        {
            Schema::create('users', function (Blueprint $table) {
                $table->id();
                $table->string('name');
                $table->string('last_name')->nullable();
                $table->string('email')->unique();
                $table->timestamp('email_verified_at')->nullable();
                $table->boolean('is_verified')->default(false);


                $table->timestamp('last_activity_at')->nullable(); //for chat
            });
        }



********
step-2: Model
********

==>> User.php <<==

    protected $appends = [
            'is_online',
        ];


    //chat model relation
    public function senders() {
        return $this->hasMany(Chat::class, 'sender_id');
    }

    public function receivers() {
        return $this->hasMany(Chat::class, 'receiver_id');
    }

    public function roomsAsUserOne()
    {
        return $this->hasMany(Room::class, 'user_one_id');
    }

    public function roomsAsUserTwo()
    {
        return $this->hasMany(Room::class, 'user_two_id');
    }

    public function allRooms()
    {
        return Room::where('user_one_id', $this->id)->orWhere('user_two_id', $this->id);
    }

    public function getIsOnlineAttribute()
    {
        return $this->last_activity_at > now()->subMinutes(5);
    }



==>> Chat.php <<==


<?php

namespace App\Models;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;

class Chat extends Model {
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'sender_id',
        'receiver_id',
        'text',
        'file',
        'room_id'
    ];

   /*  protected $hidden = [
        'created_at',
        'updated_at',
        'deleted_at',
    ]; */

    protected function casts(): array {
        return [
            'sender_id'   => 'integer',
            'receiver_id' => 'integer',
            'text'        => 'string',
        ];
    }

    protected $appends = [
        'humanize_date',
        'short_text',
        'type'
    ];

    public function getFileAttribute($value): ?string
    {
        if (filter_var($value, FILTER_VALIDATE_URL)) {
            return $value;
        }

        return $value ? url($value) : null;
    }

    public function getShortTextAttribute(): string | null
    {
        return strlen($this->text) > 20 ? substr($this->text, 0, 20) . '...' : $this->text;
    }

    public function getHumanizeDateAttribute(): string
    {
        return $this->created_at->diffForHumans();
    }

    public function getTypeAttribute(): string
    {
        if (request()->is('api/*')) {
            return $this->sender_id == auth('api')->id() ? 'sent' : 'received';
        }

        return $this->sender_id == auth('web')->user()->id ? 'sent' : 'received';
    }

    public function sender(): BelongsTo {
        return $this->belongsTo(User::class, 'sender_id');
    }

    public function receiver(): BelongsTo {
        return $this->belongsTo(User::class, 'receiver_id');
    }

    public function room(): BelongsTo {
        return $this->belongsTo(Room::class);
    }
}




==>> Room.php <<==

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Room extends Model
{
    protected $fillable = ['user_one_id','user_two_id'];

    public function userOne()
    {
        return $this->belongsTo(User::class, 'user_one_id');
    }

    public function userTwo()
    {
        return $this->belongsTo(User::class, 'user_two_id');
    }

    public function chats()
    {
        return $this->hasMany(Chat::class);
    }
    
}










********
step-3:
********
********
step-4:
********
********
step-5:
********
********
step-6:
********