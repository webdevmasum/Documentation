********
step-1: DB
********

    public function up(): void
        {
            Schema::create('rooms', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_one_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('user_two_id')->constrained('users')->onDelete('cascade');
                $table->timestamps();
                $table->unique(['user_one_id', 'user_two_id']);
            });
        }



    public function up(): void {
            Schema::create('chats', function (Blueprint $table) {
                $table->id();
                $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
                $table->foreignId('room_id')->nullable()->constrained('rooms')->nullOnDelete();
                $table->text('text')->nullable();
                $table->string('file')->nullable();
                $table->enum('status', ['sent', 'read', 'unread'])->default('unread');
                $table->timestamps();
                $table->softDeletes();
            });
        }



    public function up(): void
        {
            Schema::create('users', function (Blueprint $table) {
                $table->id();
                $table->string('name');
                $table->string('last_name')->nullable();
                $table->string('email')->unique();
                $table->timestamp('email_verified_at')->nullable();
                $table->boolean('is_verified')->default(false);


                $table->timestamp('last_activity_at')->nullable(); //for chat
            });
        }



********
step-2: Model
********

==>> User.php <<==

    protected $appends = [
            'is_online',
        ];


    //chat model relation
    public function senders() {
        return $this->hasMany(Chat::class, 'sender_id');
    }

    public function receivers() {
        return $this->hasMany(Chat::class, 'receiver_id');
    }

    public function roomsAsUserOne()
    {
        return $this->hasMany(Room::class, 'user_one_id');
    }

    public function roomsAsUserTwo()
    {
        return $this->hasMany(Room::class, 'user_two_id');
    }

    public function allRooms()
    {
        return Room::where('user_one_id', $this->id)->orWhere('user_two_id', $this->id);
    }

    public function getIsOnlineAttribute()
    {
        return $this->last_activity_at > now()->subMinutes(5);
    }



==>> Chat.php <<==


<?php

namespace App\Models;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;

class Chat extends Model {
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'sender_id',
        'receiver_id',
        'text',
        'file',
        'room_id'
    ];

   /*  protected $hidden = [
        'created_at',
        'updated_at',
        'deleted_at',
    ]; */

    protected function casts(): array {
        return [
            'sender_id'   => 'integer',
            'receiver_id' => 'integer',
            'text'        => 'string',
        ];
    }

    protected $appends = [
        'humanize_date',
        'short_text',
        'type'
    ];

    public function getFileAttribute($value): ?string
    {
        if (filter_var($value, FILTER_VALIDATE_URL)) {
            return $value;
        }

        return $value ? url($value) : null;
    }

    public function getShortTextAttribute(): string | null
    {
        return strlen($this->text) > 20 ? substr($this->text, 0, 20) . '...' : $this->text;
    }

    public function getHumanizeDateAttribute(): string
    {
        return $this->created_at->diffForHumans();
    }

    public function getTypeAttribute(): string
    {
        if (request()->is('api/*')) {
            return $this->sender_id == auth('api')->id() ? 'sent' : 'received';
        }

        return $this->sender_id == auth('web')->user()->id ? 'sent' : 'received';
    }

    public function sender(): BelongsTo {
        return $this->belongsTo(User::class, 'sender_id');
    }

    public function receiver(): BelongsTo {
        return $this->belongsTo(User::class, 'receiver_id');
    }

    public function room(): BelongsTo {
        return $this->belongsTo(Room::class);
    }
}




==>> Room.php <<==

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Room extends Model
{
    protected $fillable = ['user_one_id','user_two_id'];

    public function userOne()
    {
        return $this->belongsTo(User::class, 'user_one_id');
    }

    public function userTwo()
    {
        return $this->belongsTo(User::class, 'user_two_id');
    }

    public function chats()
    {
        return $this->hasMany(Chat::class);
    }
    
}




********
step-3: Controller
********



<?php

namespace App\Http\Controllers\API;

use App\Models\Room;
use App\Models\Chat;
use App\Models\User;
use App\Events\MessageSendEvent;
use App\Helpers\Helper;
use App\Http\Controllers\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class ChatController extends Controller
{
    public function index() {}

    public function list(): JsonResponse
    {
        // Get the authenticated user
        $authUser = Auth::guard('api')->user();

        // Fetch users who are connected as senders or receivers with the authenticated user
        $users = User::select('id', 'name', 'email', 'avatar', 'last_activity_at')
            ->whereHas('senders', function ($query) use ($authUser) {
                $query->where('receiver_id', $authUser->id);
            })
            ->orWhereHas('receivers', function ($query) use ($authUser) {
                $query->where('sender_id', $authUser->id);
            })
            ->where('id', '!=', $authUser->id)
            ->get();

        // Append the last message for each user
        $usersWithMessages = $users->map(function ($user) use ($authUser) {
            $lastChat = Chat::where(function ($query) use ($user, $authUser) {
                $query->where('sender_id', $authUser->id)
                      ->where('receiver_id', $user->id);
            })
            ->orWhere(function ($query) use ($user, $authUser) {
                $query->where('sender_id', $user->id)
                      ->where('receiver_id', $authUser->id);
            })
            ->latest()
            ->first();

            $user->last_chat = $lastChat;
            return $user;
        });

        // Sort users by the last message's created_at timestamp in descending order
        $sortedUsers = $usersWithMessages->sortByDesc(function ($user) {
            return optional($user->last_chat)->created_at;
        })->values(); // Reset keys after sorting

        $data = [
            'users' => $sortedUsers
        ];

        return response()->json([
            'success' => true,
            'message' => 'Chat retrieved successfully',
            'data' => $data,
        ], 200);
    }


    public function search(Request $request): JsonResponse
    {
        $user_id = Auth::guard('api')->id();

        $keyword = $request->get('keyword');
        $users = User::select('id', 'name', 'email', 'avatar', 'last_activity_at')
        ->where('id', '!=', $user_id)
        ->where('name', 'LIKE', "%{$keyword}%")->orWhere('email', 'LIKE', "%{$keyword}%")
        ->get();

        $data = [
            'users' => $users
        ];

        return response()->json([
            'success' => true,
            'message' => 'Chat retrieved successfully',
            'data'    => $data,
        ], 200);
    }

    /**
     ** Get messages between the authenticated user and another user
     *
     * @param User $user
     * @param Request $request
     * @return JsonResponse
     */
    public function conversation($receiver_id): JsonResponse
    {
        $sender_id = Auth::guard('api')->id();

        Chat::where('receiver_id', $sender_id)->where('sender_id', $receiver_id)->update(['status' => 'read']);

        $chat = Chat::query()
            ->where(function ($query) use ($receiver_id, $sender_id) {
                $query->where('sender_id', $sender_id)->where('receiver_id', $receiver_id);
            })
            ->orWhere(function ($query) use ($receiver_id, $sender_id) {
                $query->where('sender_id', $receiver_id)->where('receiver_id', $sender_id);
            })
            ->with([
                'sender:id,name,email,avatar,last_activity_at',
                'receiver:id,name,email,avatar,last_activity_at',
                'room:id,user_one_id,user_two_id'
            ])
            ->orderBy('created_at')
            ->paginate(50);

        $room = Room::where(function ($query) use ($receiver_id, $sender_id) {
                $query->where('user_one_id', $receiver_id)->where('user_two_id', $sender_id);
            })->orWhere(function ($query) use ($receiver_id, $sender_id) {
                $query->where('user_one_id', $sender_id)->where('user_two_id', $receiver_id);
            })->first();

        if (!$room) {
            $room = Room::create([
                'user_one_id' => $sender_id,
                'user_two_id' => $receiver_id,
            ]);
        }

        $data = [
            'receiver' => User::select('id', 'name', 'email', 'avatar', 'last_activity_at')->where('id', $receiver_id)->first(),
            'sender' => User::select('id', 'name', 'email', 'avatar', 'last_activity_at')->where('id', $sender_id)->first(),
            'room' => $room,
            'chat' => $chat
        ];

        return response()->json([
            'success' => true,
            'message' => 'Messages retrieved successfully',
            'data'    => $data,
            'code'    => 200
        ]);
    }

    /**
     *! Send a message to another user
     *
     * @param User $user
     * @param Request $request
     * @return JsonResponse
     */
    public function send($receiver_id, Request $request): JsonResponse
    {
        $validator = Validator::make($request->all(), [
            'text' => 'nullable|string|max:255',
            'file' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:1024',
        ]);

        if ($validator->fails()) {
            return response()->json(['message' => $validator->errors()->first()], 400);
        }

        $sender_id = Auth::guard('api')->id();

        $receiver_exist = User::where('id', $receiver_id)->first();
        if (!$receiver_exist || $receiver_id == $sender_id) {
            return response()->json(['success' => false, 'message' => 'User not found or cannot chat with yourself', 'data' => [], 'code' => 200]);
        }

        $room = Room::where(function ($query) use ($receiver_id, $sender_id) {
            $query->where('user_one_id', $receiver_id)->where('user_two_id', $sender_id);
        })->orWhere(function ($query) use ($receiver_id, $sender_id) {
            $query->where('user_one_id', $sender_id)->where('user_two_id', $receiver_id);
        })->first();

        if (!$room) {
            $room = Room::create([
                'user_one_id' => $sender_id,
                'user_two_id' => $receiver_id,
            ]);
        }

        $file = null;
        if ($request->hasFile('file')) {
            $file = Helper::fileUpload($request->file('file'), 'chat', time() . '_' . getFileName($request->file('file')));
        }

        $chat = Chat::create([
            'sender_id'       => $sender_id,
            'receiver_id'     => $receiver_id,
            'text'            => $request->text,
            'file'            => $file,
            'room_id'         => $room->id,
            'status'          => 'sent',
        ]);

        //* Load the sender's information
        $chat->load([
            'sender:id,name,email,avatar,last_activity_at',
            'receiver:id,name,email,avatar,last_activity_at',
            'room:id,user_one_id,user_two_id'
        ]);

        broadcast(new MessageSendEvent($chat))->toOthers();

        $data = [
            'chat' => $chat
        ];

        return response()->json([
            'success' => true,
            'message' => 'Message sent successfully',
            'data'    => $data,
            'code'    => 200
        ]);
    }

    public function seenAll($receiver_id): JsonResponse
    {
        $sender_id = Auth::guard('api')->id();

        $receiver_exist = User::where('id', $receiver_id)->first();
        if (!$receiver_exist || $receiver_id == $sender_id) {
            return response()->json(['success' => false, 'message' => 'User not found or cannot chat with yourself', 'data' => [], 'code' => 200]);
        }

        $chat = Chat::where('receiver_id', $sender_id)->where('sender_id', $receiver_id)->update(['status' => 'read']);

        $data = [
            'chat' => $chat
        ];

        return response()->json([
            'success' => true,
            'message' => 'Message seen successfully',
            'data'    => $data,
            'code'    => 200
        ]);
    }

    public function seenSingle($chat_id): JsonResponse
    {
        $sender_id = Auth::guard('api')->id();

        $chat = Chat::where('id', $chat_id)->where('receiver_id', $sender_id)->update(['status' => 'read']);

        $data = [
            'chat' => $chat
        ];

        return response()->json([
            'success' => true,
            'message' => 'Message seen successfully',
            'data'    => $data,
            'code'    => 200
        ]);
    }

    public function room($receiver_id)
    {
        $sender_id = Auth::guard('api')->id();

        $receiver_exist = User::where('id', $receiver_id)->first();
        if (!$receiver_exist || $receiver_id == $sender_id) {
            return response()->json(['success' => false, 'message' => 'User not found or cannot chat with yourself', 'data' => [], 'code' => 200]);
        }

        $room = Room::with(['userOne:id,name,email,avatar,last_activity_at', 'userTwo:id,name,email,avatar,last_activity_at'])
        ->where(function ($query) use ($receiver_id, $sender_id) {
            $query->where('user_one_id', $receiver_id)->where('user_two_id', $sender_id);
        })->orWhere(function ($query) use ($receiver_id, $sender_id) {
            $query->where('user_one_id', $sender_id)->where('user_two_id', $receiver_id);
        })->first();

        if (!$room) {
            $room = Room::create([
                'user_one_id' => $sender_id,
                'user_two_id' => $receiver_id,
            ]);
        }

        $data = [
            'room' => $room
        ];

        return response()->json(['success' => true, 'message' => 'Group retrieved successfully', 'data' => $data, 'code' => 200]);
    }
}









********
step-4: Route/channels.php
********

<?php

use Illuminate\Support\Facades\Broadcast;
use App\Models\Room;

/*
# chat
*/

Broadcast::channel('chat-room.{room_id}', function ($user, $room_id) {
    $room = Room::find($room_id);
    return (int) $user->id === (int) $room?->user_one_id || (int) $user->id === (int) $room?->user_two_id;
});

Broadcast::channel('chat-receiver.{receiver_id}', function ($user, $receiver_id) {
    return (int) $user->id === (int) $receiver_id;
});

Broadcast::channel('chat-sender.{sender_id}', function ($user, $sender_id) {
    return (int) $user->id === (int) $sender_id;
});



********
step-5: Route/api.php
********

    /*
    # Chat Route
    */

    Route::middleware(['auth:api'])->controller(ChatController::class)->prefix('auth/chat')->group(function () {
        Route::get('/list', 'list');
        Route::post('/send/{receiver_id}', 'send');
        Route::get('/conversation/{receiver_id}', 'conversation');
        Route::get('/room/{receiver_id}', 'room');
        Route::get('/search', 'search');
        Route::get('/seen/all/{receiver_id}', 'seenAll');
        Route::get('/seen/single/{chat_id}', 'seenSingle');
    });


********
step-6:
********