
**************************
Database:
**************************

    Schema::create('dynamic_pages', function (Blueprint $table) {
        $table->id();
        $table->string( 'page_title' )->nullable();
        $table->string( 'page_slug' )->nullable();
        $table->longText( 'page_content' )->nullable();
        $table->enum('status', ['active', 'inactive'])->default('active')->nullable();
        $table->timestamps();
        $table->softDeletes();
    });

**************************
Model:
**************************

    class DynamicPage extends Model
    {
        use HasFactory,SoftDeletes;

        protected $guarded = [];
    }


**************************
Backend Controller:
**************************


<?php

namespace App\Http\Controllers\Web\Backend\Settings;

use App\Http\Controllers\Controller;
use App\Models\DynamicPage;
use Devrabiul\ToastMagic\Facades\ToastMagic;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Yajra\DataTables\DataTables;

class DynamicPageController extends Controller
{
    /**
     * Display a listing of the dynamic pages.
     *
     * @param Request $request
     */

    public function index(Request $request)
    {
        $data = DynamicPage::latest();
        if ($request->ajax()) {
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('page_title', function ($data) {
                    $page_title       = $data->page_title;
                    $short_page_title = strlen($page_title) > 100 ? substr($page_title, 0, 100) . '...' : $page_title;
                    return '<p>' . $short_page_title . '</p>';
                })
                ->addColumn('page_content', function ($data) {
                    $page_content       = $data->page_content;
                    $short_page_content = strlen($page_content) > 100 ? substr($page_content, 0, 100) . '...' : $page_content;
                    return '<p>' . $short_page_content . '</p>';
                })
                ->addColumn('status', function ($data) {
                    $status = '';
                    $status .= '<div class="form-check form-switch">'; // Bootstrap 5 switch container
                    $status .= '<input
                    class="form-check-input"
                    type="checkbox"
                    role="switch"
                    id="flexSwitch' . $data->id . '"
                    onclick="showStatusChangeAlert(' . $data->id . ')"
                    getAreaid="' . $data->id . '"
                    name="status"';

                    // Check if the status is active
                    if ($data->status == "active") {
                        $status .= ' checked';
                    }

                    $status .= '>';
                    $status .= '</div>';

                    return $status;
                })
                ->addColumn('action', function ($data) {

                    return '<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                <a href="' . route('settings.dynamic-page.edit',  $data->id) . '" type="button" class="btn btn-icon btn-sm bg-success-subtle me-1" title="Edit">
                                  <i class="mdi mdi-pencil-outline fs-14 text-success"></i>
                                 </a>&nbsp;
                                 <a href="#" onclick="showDeleteConfirm(' . $data->id . ')" type="button" class="btn btn-icon btn-sm bg-danger-subtle delete-button" title="Delete">
                                  <i class="mdi mdi-delete fs-14 text-danger"></i>
                                </a>

                                </div>';
                })
                ->rawColumns(['page_title', 'page_content', 'status', 'action'])
                ->filterColumn('page_title', function ($query, $keyword) {
                    $query->where('page_title', 'like', "%{$keyword}%");
                })
                ->filterColumn('page_content', function ($query, $keyword) {
                    $query->where('page_content', 'like', "%{$keyword}%");
                })
                ->make(true);
        }
        return view('backend.layouts.settings.dynamic_page.index');
    }

    /**
     * Show the form for creating a new dynamic page.
     *
     */
    public function create()
    {
        return view('backend.layouts.settings.dynamic_page.create');
    }

    /**
     * Store a newly created dynamic page in the database.
     *
     * @param Request $request
     */
    public function store(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'page_title' => 'required|string|max:100',
                'page_content' => 'required|string',
            ]);

            // If validation fails, redirect back with errors and input data

            if ($validator->fails()) {
                return redirect()->back()->withErrors($validator)->withInput();
            }

            $data = new DynamicPage();
            $data->page_title = $request->page_title;
            $data->page_slug = Str::slug($request->page_title);
            $data->page_content = $request->page_content;
            $data->save();


            ToastMagic::success('Dynamic Page Created Successfully.');

            return redirect()->route('settings.dynamic-page.index');
        } catch (Exception $e) {

            ToastMagic::warning('Dynamic Page Failed To Create.');

            return redirect()->route('settings.dynamic-page.index');
        }
    }

    /**
     * Show the form for editing the specified dynamic page.
     *
     * @param int $id
     */
    public function edit($id)
    {
        $data = DynamicPage::find($id);
        return view('backend.layouts.settings.dynamic_page.edit', compact('data'));
    }


    /**
     * Update the specified dynamic page in the database.
     *
     * @param Request $request
     * @param int $id
     */
    public function update(Request $request, $id)
    {
        try {
            $validator = Validator::make($request->all(), [
                'page_title' => 'required|string|max:100',
                'page_content' => 'required|string',
            ]);

            // If validation fails, redirect back with errors and input data
            if ($validator->fails()) {
                return redirect()->back()->withErrors($validator)->withInput();
            }

            $data = DynamicPage::findOrFail($id);
            $data->page_title = $request->page_title;
            $data->page_slug = Str::slug($request->page_title);
            $data->page_content = $request->page_content;
            $data->update();

            ToastMagic::success('Dynamic Page Updated Successfully.');
            return redirect()->route('settings.dynamic-page.index');
        } catch (Exception $e) {
            ToastMagic::warning('Dynamic Page Failed To Update.');
            return redirect()->route('settings.dynamic-page.index');
        }
    }

    /**
     * Remove the specified dynamic page from the database.
     *
     * @param int $id
     */
    public function destroy($id)
    {
        $data = DynamicPage::findOrFail($id);
        $data->delete();

        return response()->json([
            'success' => true,
            'message' => 'Deleted successfully.',
        ]);
    }

    /**
     * Change the status of the specified dynamic page.
     *
     * @param int $id
     */
    public function status($id)
    {
        $data = DynamicPage::where('id', $id)->first();
        if ($data->status == 'active') {
            // If the current status is active, change it to inactive
            $data->status = 'inactive';
            $data->save();

            // Return JSON response indicating success with message and updated data
            return response()->json([
                'success' => false,
                'message' => 'Unpublished Successfully.',
                'data' => $data,
            ]);
        } else {
            // If the current status is inactive, change it to active
            $data->status = 'active';
            $data->save();

            // Return JSON response indicating success with a message and updated data.
            return response()->json([
                'success' => true,
                'message' => 'Published Successfully.',
                'data' => $data,
            ]);
        }
    }
}




**************************
Route:
**************************

    //Route for DynamicPageController
    Route::get('/dynamic-page', [DynamicPageController::class, 'index'])->name('settings.dynamic-page.index');
    Route::get('/dynamic-page/create', [DynamicPageController::class, 'create'])->name('settings.dynamic-page.create');
    Route::post('/dynamic-page/store', [DynamicPageController::class, 'store'])->name('settings.dynamic-page.store');
    Route::get('/dynamic-page/edit/{id}', [DynamicPageController::class, 'edit'])->name('settings.dynamic-page.edit');
    Route::post('/dynamic-page/update/{id}', [DynamicPageController::class, 'update'])->name('settings.dynamic-page.update');
    Route::delete('/dynamic-page/delete/{id}', [DynamicPageController::class, 'destroy'])->name('settings.dynamic-page.destroy');
    Route::get('/dynamic-page/status/{id}', [DynamicPageController::class, 'status'])->name('settings.dynamic-page.status');


**************************
View:
**************************

**************************
Sidebar:
**************************

**************************
Api Route:
**************************

**************************
Api Controller:
**************************

**************************
View:
**************************

**************************
Database:
**************************

**************************
Database:
**************************









