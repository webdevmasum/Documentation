********
step-: Setup
********

Install Stripe 
-->> composer require stripe/stripe-php

.env
-->> Publishable key: pk_test_51QJoHQGEF1Q9fsWzBhRRj418NdfC361iMdLYC28AU5COfpKTJsoanbBeyBA58kiZHv33jSrW5rqfaaoyqLNIjEoe00nbv2V9Y2

-->> Secret key: sk_test_51QJoHQGEF1Q9fsWzYKExuOTG0Yn5qka0uK4tl0y34zZga1YQnPsJVxxj5REYUZjYD1NQu2xx2i9gOhImRRiAu9a100vwgGQTFt

-->> STRIPE_WEBHOOK_SECRET=whsec_pTFPc5i0G5VWsGb1DuHntAExDtolFFxo


config/services.php

'stripe' => [
        'model' => App\Models\User::class,
        'key' => env('STRIPE_KEY'),
        'secret' => env('STRIPE_SECRET'),
        'webhook_secret' => env('STRIPE_WEBHOOK_SECRET'),
    ],


********
step-1: Route API
********

** make sure stripe route and api route is same.
//!! Route for Stripe Payment using webhooks

Route::post('/payment-intent', [StripeWebhookController::class, 'createPaymentIntent']);
Route::post('/stripe/webhook', [StripeWebhookController::class, 'handleWebhook']);


********
step-2: Controller API
********
//!! note: 1st create Purchase but status false, after create intent than update status by webhook.


<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Course;
use App\Models\CoursePurchase;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Stripe\Exception\ApiErrorException;
use Stripe\PaymentIntent;
use Stripe\Stripe;

class StripeWebhookController extends Controller
{
    public function __construct()
    {
        Stripe::setApiKey(env('STRIPE_SECRET'));
    }


    //!! course  amount = course price for payment secure

    public function createPaymentIntent(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'course_id' => 'required|exists:courses,id',
            'amount'    => 'required|numeric|min:1',
            'user_id'   => 'required|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 422);
        }

        // Check if the amount matches the course price
        $course = Course::find($request->course_id);
        if ($course->price != $request->amount) {
            return response()->json(['error' => 'The amount must match the course price.'], 422);
        }

        DB::beginTransaction();

        try {
            $coursePurchase = CoursePurchase::create([
                'user_id'   => $request->user_id,
                'course_id' => $request->course_id,
                'amount'    => $request->amount,
                'status'    => false,
            ]);

            Stripe::setApiKey(env('STRIPE_SECRET'));

            $paymentIntent = PaymentIntent::create([
                'amount'        => $request->amount * 100,
                'currency'      => 'usd',
                'metadata'      => [
                    'course_id' => $request->course_id,
                    'course_purchase_id' => $coursePurchase->id,
                ],
            ]);

            Payment::create([
                'course_purchase_id' => $coursePurchase->id,
                'user_id'            => $request->user_id,
                'payment_method'     => 'stripe',
                'amount'             => $request->amount,
                'status'             => 'pending',
            ]);

            DB::commit();

            return response()->json([
                'clientSecret' => $paymentIntent->client_secret,
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }


    //!! course_purchase and payment status update with webhook
    public function handleWebhook(Request $request)
    {
        Stripe::setApiKey(env('STRIPE_SECRET_KEY'));

        $payload = $request->getContent();
        $sig_header = $request->header('Stripe-Signature');
        $endpoint_secret = env('STRIPE_WEBHOOK_SECRET');

        Log::info('Webhook Payload:', ['payload' => $payload]);

        try {
            $event = \Stripe\Webhook::constructEvent($payload, $sig_header, $endpoint_secret);

            switch ($event->type) {
                case 'payment_intent.succeeded':
                    $paymentIntent = $event->data->object;

                    // Update the CoursePurchase status to true
                    $coursePurchase = CoursePurchase::find($paymentIntent->metadata->course_purchase_id);
                    if ($coursePurchase) {
                        $coursePurchase->update(['status' => true]);
                    }

                    // Optionally, you can also update the Payment record if needed
                    Payment::where('course_purchase_id', $paymentIntent->metadata->course_purchase_id)
                        ->update(['status' => 'succeeded', 'stripe_payment_id' => $paymentIntent->id]);

                    return response()->json(['message' => 'Payment successful'], 200);
                    break;

                case 'payment_intent.payment_failed':
                    $paymentIntent = $event->data->object;

                    Payment::where('course_purchase_id', $paymentIntent->metadata->course_purchase_id)
                        ->update(['status' => 'failed', 'stripe_payment_id' => $paymentIntent->id]);

                    return response()->json(['message' => 'Payment failed'], 200);
                    break;
            }

            return response()->json(['status' => 'success'], 200);
        } catch (\Stripe\Exception\SignatureVerificationException $e) {
            Log::error('Stripe Webhook signature verification failed: ' . $e->getMessage());
            return response()->json(['error' => 'Webhook signature verification failed'], 400);
        } catch (\Exception $e) {
            Log::error('Stripe Webhook error: ' . $e->getMessage());
            return response()->json(['error' => 'Something went wrong'], 500);
        }
    }
}



********
step-3: API Testing
********

--> EndPoint:   {{base_url}}/payment-intent

--> Argument: course_id, amount, course_purchase_id

--> Output:

{
    "clientSecret": "pi_3QhTeHGEF1Q9fsWz1gionW4Z_secret_v76ZI17jmvzP1DnKOOweCUe3k"
}




