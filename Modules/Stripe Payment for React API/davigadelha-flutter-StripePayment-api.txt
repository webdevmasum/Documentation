********
step-: Setup
********

Install Stripe 
-->> composer require stripe/stripe-php

.env
-->> Publishable key: pk_test_51QJoHQGEF1Q9fsWzBhRRj418NdfC361iMdLYC28AU5COfpKTJsoanbBeyBA58kiZHv33jSrW5rqfaaoyqLNIjEoe00nbv2V9Y2

-->> Secret key: sk_test_51QJoHQGEF1Q9fsWzYKExuOTG0Yn5qka0uK4tl0y34zZga1YQnPsJVxxj5REYUZjYD1NQu2xx2i9gOhImRRiAu9a100vwgGQTFt

-->> STRIPE_WEBHOOK_SECRET=whsec_pTFPc5i0G5VWsGb1DuHntAExDtolFFxo


config/services.php

'stripe' => [
        'model' => App\Models\User::class,
        'key' => env('STRIPE_KEY'),
        'secret' => env('STRIPE_SECRET'),
        'webhook_secret' => env('STRIPE_WEBHOOK_SECRET'),
    ],


********
step-1: Route API
********

//!! Route for Stripe Payment using webhooks
Route::post('/payment-intent', [StripeWebhookController::class, 'createPaymentIntent']);
Route::post('/stripe/webhook', [StripeWebhookController::class, 'handlePaymentSuccess']);


********
step-2: Controller API
********



<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\CoursePurchase;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Stripe\Exception\ApiErrorException;
use Stripe\PaymentIntent;
use Stripe\Stripe;

class StripeWebhookController extends Controller
{
    public function __construct()
    {
        Stripe::setApiKey(env('STRIPE_SECRET'));
    }

    //! Existing Payment Intent Creation
    public function createPaymentIntent(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'amount' => 'required|numeric|min:1',
            'course_id' => 'required|exists:courses,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 422);
        }

        // dd($request->all());
        try {
            $paymentIntent = PaymentIntent::create([
                'amount' => $request->amount * 100,
                'currency' => 'usd',
                'metadata' => [
                    'course_id' => $request->course_id,
                ]
            ]);

            return response()->json([
                'clientSecret' => $paymentIntent->client_secret
            ]);
        } catch (ApiErrorException $e) {
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    //!! Webhook to Handle Stripe Payment Success
    public function handlePaymentSuccess(Request $request)
    {
        $payload = $request->getContent();
        $sig_header = $request->header('Stripe-Signature');
        $endpoint_secret = env('STRIPE_WEBHOOK_SECRET');

        try {
            $event = \Stripe\Webhook::constructEvent(
                $payload,
                $sig_header,
                $endpoint_secret
            );
        } catch (\UnexpectedValueException $e) {
            return response()->json(['error' => 'Invalid payload'], 400);
        } catch (\Stripe\Exception\SignatureVerificationException $e) {
            return response()->json(['error' => 'Invalid signature'], 400);
        }

        if ($event->type == 'payment_intent.succeeded') {
            $paymentIntent = $event->data->object;

            // Save Course Purchase
            $coursePurchase = CoursePurchase::create([
                'course_id'             => $paymentIntent->metadata->course_id,
                'user_id'               => $paymentIntent->metadata->user_id,
                'amount'                => $paymentIntent->amount / 100,
                'payment_method'        => 'stripe',
                'stripe_payment_id'     => $paymentIntent->id,
                'status'                => 'succeeded',
            ]);


            // Save Payment
            $payment = Payment::create([
                'user_id'               => $paymentIntent->metadata->user_id,
                'course_purchase_id'    => $coursePurchase->id,
                'amount'                => $paymentIntent->amount / 100,
                'payment_method'        => 'stripe',
                'stripe_payment_id'     => $paymentIntent->id,
                'status'                => 'succeeded',
            ]);



            return response()->json(['message' => 'Payment successful'], 200);
        }

        return response()->json(['error' => 'Payment failed'], 400);
    }
}


********
step-3: API Testing
********

--> EndPoint:   {{base_url}}/payment-intent

--> Argument: course_id, amount

--> Output:

{
    "clientSecret": "pi_3QhTeHGEF1Q9fsWz1gionW4Z_secret_v76ZI17jmvzP1DnKOOweCUe3k"
}




