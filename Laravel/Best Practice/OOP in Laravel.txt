>>>>>><<<<<<<>>>>>>>>><<<<<<<<>>>>>>>>
Laravel e OOP Concept Real Example
>>>>>><<<<<<<>>>>>>>>><<<<<<<<>>>>>>>>


1️⃣ Encapsulation (Data Protection)


🛠 Model: Product.php

    namespace App\Models;

    use Illuminate\Database\Eloquent\Model;

    class Product extends Model
    {
        protected $fillable = ['name', 'price', 'stock'];
    }

📌 Explanation:
    Ata encapsulation (Data protection) ensure kore.
    price o stock directly change korte chaile mass assignment error dibe.


🛠 Use in Controller

    $product = new Product();
    $product->name = "Smartphone";
    $product->price = 20000;
    $product->stock = 10;
    $product->save();

🔹 Encapsulation e advantage hocche unauthorized field insert/update korte dibe na.



2️⃣ Inheritance (Code Reusability)

    🔹 Inheritance mane ekta Parent Class er property & method use kora child class e.
    🔹 Laravel e Base Controller theke Common Method gulo inherit kore use kora hoy.


🛠 Base Controller (BaseController.php)

    namespace App\Http\Controllers;

    use Illuminate\Http\Request;

    class BaseController extends Controller
    {
        public function sendResponse($message, $data = [])
        {
            return response()->json([
                'message' => $message,
                'data' => $data
            ]);
        }
    }



📌 Explanation:

    🔹Ei BaseController er sendResponse() method sob controller e reuse korte parbo.
    🔹Response format ek rakhar jonno inheritance use korbo.



🛠 ProductController.php (Inheritance Use)

    namespace App\Http\Controllers;

    use App\Models\Product;
    use Illuminate\Http\Request;

    class ProductController extends BaseController
    {
        public function store(Request $request)
        {
            $product = Product::create($request->all());
            return $this->sendResponse('Product created successfully', $product);
        }
    }


    🔹 Inheritance e advantage hocche alada controller e same response function likhte hobe na, BaseController theke inherit kore reuse kora jabe.





3️⃣ Polymorphism (Multiple Model Relationship)

    Polymorphism mane ekoi method onek model e kaj korbe.
    Laravel e Polymorphic Relationship use kore ekta Model (Image) onek Model er sathe relate korte pari.

🛠 Example: Product & Order er Image thakbe

    Product er image thakbe
    Order er invoice image thakbe
    Same Image Model duita jaygay use korbo (Polymorphism)


🛠 Image Model

    namespace App\Models;

    use Illuminate\Database\Eloquent\Model;

    class Image extends Model
    {
        protected $fillable = ['url', 'imageable_id', 'imageable_type'];

        public function imageable()
        {
            return $this->morphTo();
        }
    }


🛠 Product Model e Relation

    namespace App\Models;

    use Illuminate\Database\Eloquent\Model;

    class Product extends Model
    {
        public function images()
        {
            return $this->morphMany(Image::class, 'imageable');
        }
    }


🛠 Order Model e Relation

    namespace App\Models;

    use Illuminate\Database\Eloquent\Model;

    class Order extends Model
    {
        public function images()
        {
            return $this->morphMany(Image::class, 'imageable');
        }
    }


📌 Explanation:

    🔹Ekoi images() method Product & Order er modhe use kortesi
    🔹Ei same method use kore onek model er sathe relation toiri hocche
    🔹🔹Advantage hocche imageable method call korlei automatic image fetch hoye jabe.   




4️⃣ Dependency Injection (Service Class)

    Dependency Injection mane Controller e direct logic na likhe ekta Service Class inject kore kaj kora.
    Laravel e Service Class use kore Payment Process korbo.


🛠 Service Class (PaymentService.php)

    namespace App\Services;

    class PaymentService
    {
        public function processPayment($amount)
        {
            return "Payment of $amount processed successfully!";
        }
    }



🛠 Controller e Inject kora

    namespace App\Http\Controllers;

    use App\Services\PaymentService;

    class OrderController extends Controller
    {
        protected $paymentService;

        public function __construct(PaymentService $paymentService)
        {
            $this->paymentService = $paymentService;
        }

        public function checkout()
        {
            return $this->paymentService->processPayment(5000);
        }
    }




📌 Explanation:
    🔹PaymentService directly object create kore use korle tight coupling hoye jeto.
    🔹But amra Dependency Injection kore automatically PaymentService inject korlam.
    🔹🔹 Advantage hocche easily PaymentService change korte parbo without affecting controller.






✅ Summary (Key Takeaways)
OOP Concept	Laravel Implementation
Encapsulation	Model er $fillable use kore data protect kora
Inheritance	BaseController theke inherit kore common function use kora
Polymorphism	morphMany() use kore onek model e same relation create kora
Dependency Injection	Service Class inject kore logic alada rakha



🔹 Laravel e OOP Best Practice

✅ Controller e direct logic na likhe Service/Repository use koro
✅ Model e Only Query Related Logic rakho, extra logic Service Layer e rekho
✅ Tight Coupling avoid korte Service Class use koro
✅ Base Class create kore common method reuse koro


