âœ… Controller & Method Best Practices

    class ProductController extends Controller
    {
        public function store(StoreProductRequest $request)
        {
            // Store logic
        }

        public function update(UpdateProductRequest $request, Product $product)
        {
            // Update logic
        }
    }



âœ… Resource Controller & Resource Routes

    -->> php artisan make:controller ProductController --resource
    >>>> Route::resource('products', ProductController::class);



ðŸ”¹ðŸ”¹ Database Transaction Best Practices

    DB::beginTransaction();
    try {
        // Multiple database operations
        DB::commit();
    } catch (\Exception $e) {
        DB::rollBack();
        // Handle error
    }



ðŸ”¹ðŸ”¹ Use Transactions for Multiple Queries

    DB::beginTransaction();

    try {
        $user = User::create(['name' => 'John Doe']);
        $order = Order::create(['user_id' => $user->id, 'total' => 100]);
        
        DB::commit();
    } catch (\Exception $e) {
        DB::rollBack();
        // Handle error
    }



ðŸ”¹ðŸ”¹Security Best Practices

âœ… Avoid SQL Injection Using Eloquent & Query Builder

    ðŸ”¹Eloquent Example:
        $users = User::where('email', $email)->get();


    ðŸ”¹Query Builder Example:
        $users = DB::table('users')->where('email', $email)->get();



âœ… XSS Protection (Cross-site Scripting)

    ðŸ”¹ User input er theke HTML content sanitize korte hobe jate XSS attack na hoy.

    {{ $user->bio }}

    ðŸ”¹ Laravel e {!! !!} diye direct HTML output korle XSS vulnerability thakte pare, tai {!! !!} use kora avoid korte hobe.



âœ… Avoid count() on Large Datasets

ðŸ”¹Good Practice
    $exists = Product::where('price', '>', 500)->exists();


