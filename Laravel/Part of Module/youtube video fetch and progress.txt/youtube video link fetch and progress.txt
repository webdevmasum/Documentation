**********************************
Database:
**********************************

    Schema::create('course_contents', function (Blueprint $table) {
            $table->id();

            $table->string('course_content_title', 250);
            $table->text('course_content_subtitle')->nullable();
            $table->string('course_content_asset', 200)->nullable();
            $table->string('video', 200)->nullable();
            $table->text('course_content_description')->nullable();
            $table->enum('status', [0, 1])->default(1)->comment('0 = Deactive, 1 = Active');

            // Relationnal Data
            $table->foreignId('course_module_id')
                ->constrained()
                ->restrictOnDelete()
                ->cascadeOnUpdate();
            $table->foreignId('course_id')
                ->constrained()
                ->restrictOnDelete()
                ->cascadeOnUpdate();

            $table->timestamps();
            $table->softDeletes();
        });

[content's video will fetch]


    Schema::create('video_progress', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreignId('course_content_id')->constrained('course_contents')->onDelete('cascade');
            $table->float('progress')->default(0); // Store progress as a percentage (0-100)
            $table->float('current_time')->default(0);
            $table->timestamps();
        });

**********************************
Model:
**********************************

    ðŸ“Œcontent.php

    public function videoProgress() {
        return $this->hasMany( VideoProgress::class, 'course_content_id' );
    }

    ðŸ“ŒVideoProgress.php
    class VideoProgress extends Model
    {
        use HasFactory;
        // protected $fillable = ['user_id', 'course_content_id', 'progress'];
        protected $guarded = [];

        public function CourseContent(){
            return $this->belongsTo(CourseContent::class, 'course_content_id');
        }

        public function User(){
            return $this->belongsTo(User::class, 'user_id');
        }
    }

**********************************
Route backend
**********************************

    /**
    * Course content -> Video Progress
    */

    Route::post('/video-progress', [VideoProgressController::class, 'store'])->name('video.progress.store');
    Route::get('/video-progress/{courseContentId}', [VideoProgressController::class, 'get'])->name('video.progress.get');

    // previous page progress bar updated
    Route::get('/video/progress/{id}', [VideoProgressController::class, 'getProgress'])->name('video.progress.get');



**********************************
Controller backend
**********************************


<?php

namespace App\Http\Controllers\Web\Backend;

use App\Http\Controllers\Controller;
use App\Models\VideoProgress;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class VideoProgressController extends Controller
{
    public function store(Request $request)
    {
        $userId = auth()->id();

        VideoProgress::updateOrCreate(
            [
                'user_id' => $userId,
                'course_content_id' => $request->course_content_id,
            ],
            [
                'progress' => $request->progress,
                'current_time' => $request->current_time
            ]
        );

        return response()->json(['message' => 'Progress saved']);
    }


    public function get($courseContentId)
    {
        $userId = auth()->id();
        $progress = VideoProgress::where('user_id', $userId)
            ->where('course_content_id', $courseContentId)
            ->first();

        return response()->json([
            'current_time' => $progress->current_time ?? 0
        ]);
    }


    // previous page progress bar updated
    public function getProgress($id)
    {
        $progress = VideoProgress::where('course_content_id', $id)->first();

        return response()->json([
            'current_time' => $progress->current_time ?? 0,
            'progress' => $progress->progress ?? 0,
        ]);
    }
}


**********************************
Controller Frontend
**********************************



<?php

namespace App\Http\Controllers\Web\FrontEnd;

use App\Http\Controllers\Controller;
use App\Models\Course;
use App\Models\CourseContent;
use App\Models\CourseModule;
use Illuminate\Http\Request;

class MyCourseModuleController extends Controller
{
    public function myCourse()
    {
        $mycourses = Course::with('modules.contents')->get();
        return view('front_end.layout.my_course', compact('mycourses'));
    }


    /**
     * Shows the details of a course.
     *
     * @param int $id the id of the course
     * @return \Illuminate\Contracts\View\View
     */
    public function myCourseDetails($id)
    {
        $mycourse = Course::with(['modules.contents'])->findOrFail($id);
        // dd($mycourse);
        return view('front_end.layout.my_course_details', compact('mycourse'));
    }


    public function myCourseLesson($id)
    {
        $contents = CourseContent::findOrFail($id);

        return view('front_end.layout.my_course_lessondetails', compact('contents' ));
    }



}



**********************************
Controller
**********************************

**********************************
Controller
**********************************

**********************************
Controller
**********************************

**********************************
Controller
**********************************