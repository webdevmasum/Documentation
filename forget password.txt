**************++++++++++ forget password backup ++++++++++++************
*+* by refat
* use notification

* Route: 

//! Route for Reset password by Masum
Route::post('/forgot-password', [ResetPasswordController::class, 'forgotPassword']);
Route::post('/verify-otp', [ResetPasswordController::class, 'verifyOtp']);
Route::post('/reset-password', [ResetPasswordController::class, 'resetPassword']);




* controller: 

-----------------------------------------------------------------------


class ResetPasswordController extends Controller
{
    public function forgotPassword(Request $request)
    {
        $validator = Validator::make(
            $request->all(),
            [
                'email' => 'required|email|exists:users,email',
            ],
            [
                'email.required' => 'The email field is required.',
                'email.email' => 'The email format is invalid.',
                'email.exists' => 'The provided email is not found.',
            ]
        );

        if ($validator->fails()) {
            // return response()->json($validator->errors(), 422);
            return response()->json([
                'status' => false,
                'error' => $validator->errors()->first(),
                'code' => 422,
            ], 422);
        }

        $otp = rand(1000, 9999); // Generate 4-digit OTP
        $user = User::where('email', $request->email)->first();
        $user->otp = $otp;
        $user->otp_expiration = Carbon::now()->addMinutes(15); // Set OTP expiration to 15 minutes
        $user->save();

        // Send OTP via email
        Notification::send($user, new PasswordResetNotification($otp));

        return response()->json([
            'status' => true,
            'message' => 'OTP sent to your email.',
            'otp' => $otp,
            'email' => $user->email,
            'code' => 200,
        ], 200);
    }

    public function verifyOtp(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:users,email',
            'otp' => 'required|numeric|digits:4',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'error' => $validator->errors()->first(),
                'code' => 422,
            ], 422);
        }

        $user = User::where('email', $request->email)->first();

        //check user and otp match or not
        if (!$user && $user->otp !== $request->otp) {
            return response()->json([
                'status' => false,
                'message' => 'Invalid OTP or user not found.',
                'code' => 403,
            ]);
        }
        //check user otp and otp_expiration is null
        if (!$user->otp || !$user->otp_expiration) {
            return response()->json([
                'status' => false,
                'message' => 'Invalid OTP.',
                'code' => 403,
            ]);
        }

        // Check if the code is expired
        if (Carbon::now()->greaterThan($user->otp_expiration)) {
            return response()->json([
                'status' => false,
                'message' => 'Reset code has expired.',
                'code' => 403,
            ], 403);
        }

        return response()->json([
            'status'  => true,
            'message' => 'Reset code is valid.',
            'code'    => 200,
        ], 200);
    }

    public function resetPassword(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:users,email',
            'otp' => 'required|numeric|digits:4',
            'password' => 'required|string|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'error' => $validator->errors()->first(),
                'code' => 422,
            ], 422);
        }

        $user = User::where('email', $request->email)->first();
        //check user and otp match or not
        if (!$user && $user->otp !== $request->otp) {
            return response()->json([
                'status' => false,
                'message' => 'Invalid OTP or user not found.',
                'code' => 403,
            ]);
        }
        
        //check user otp and otp_expiration is null
        if (!$user->otp || !$user->otp_expiration ) {
            return response()->json([
                'status' => false,
                'message' => 'Invalid OTP.',
                'code' => 403,
            ]);
        }
        
        // Check if the code is expired
        if (Carbon::now()->greaterThan($user->otp_expiration)) {
            return response()->json([
                'status' => false,
                'message' => 'Reset code has expired.',
                'code' => 403,
            ], 403);
        }

        // Reset password
        $user->password       = Hash::make($request->password);
        $user->otp            = null; // Clear the reset code
        $user->otp_expiration = null; // Clear the expiration time
        $user->save();


        return response()->json([
            'status' => true,
            'message' => 'Password reset successfully.',
            'code' => 200,
        ], 200);
    }

    
}



---------------------------------------------------------------




* Notifications/ PasswordResetNotification.php

-----------------------------------------------------------------


class PasswordResetNotification extends Notification 
{
    use Queueable;

    public $code;

    /**
     * Create a new notification instance.
     */
    public function __construct($code)
    {
        $this->code = $code;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
            ->subject('Your Password Reset Code')
            ->markdown('emails.otp', [
                'code' => $this->code, // Pass the reset code to the view
            ]);
    }
}



----------------------------------------------------------------------------



* .env 



MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=b9754398580118
MAIL_PASSWORD=1b1aa7a122468c
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"




* view/emails/otp.blade.php



@component('mail::message')
# OTP Verification Request

You have requested to verify your account with an OTP (One-Time Password). Your OTP code is:

@component('mail::panel')
*{{ $code }}*
@endcomponent

This code will expire in 15 minutes.

If you did not request this OTP, please ignore this email.

Thanks,
{{ config('app.name') }}
@endcomponent

















